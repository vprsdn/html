doctype:
{
	-	<!DOCTYPE html>
	-	This is not an HTML tag. This is used by the browser to know what type of a document to expect.
}

Head:
{
	-	This includes the keywords and a page description that would appear in search results, css styles, favicon, author, etc.

	-	Meta attributes:
	{
		-	viewport: `<meta name="viewport" content="width=device-width, initial-scale=1.0" />`
			-	Sets device width as viewport width and sets initial zoom level to 1x.
		-	charset: specifies the character set that the document is permitted to use. utf-8 can handle/display pretty much any human language.
		-	https://www.w3schools.com/html/html_charset.asp

		-	Open graph properties, invented by facebook, helps in providing a richer metadata for websites. These properties are useful while sharing links on social sites like facebook. When shared it shows an image along with description for better experience.
			-	https://ogp.me/

		-	Twitter has similar metadata properties called "Twitter Cards"
			-	https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards
	}

	-	Favicon:
	{
		-	<link rel="icon" href="favicon.ico" type="image/x-icon" />
		-	Different rel values can be used for displaying different size favicons based on device type.
	}

	-	Stylesheet:
	{
		-	External style sheet is added with rel="stylesheet" property.
		-	<link rel="stylesheet" href="my-css-file.css" />
	}

	-	JS:
	{
		-	External JS file is added to the html with script tag.
		-	<script src="my-js-file.js" defer></script>
		-	"defer" instructs the browser to load the JavaScript after the page has finished parsing the HTML.
	}

	-	Language:
	{
		-	Primary language can be set to the document by adding lang attribute to the html tag.
			-	<html lang="en-US">
		-	This is useful for displaying language specific search results and for screen readers.
		-	Language can be added to certain sub sections of the body.
			-	<p>Japanese example: <span lang="ja">ご飯が熱い。</span>.</p>
	}
}

Text:
{
	-	Use em to emphasis importance on certain words. This puts emphasis and displays the words in italics.
	-	To just italicize the words, use span with css or <i>

	-	Similarly for strong importance, use <strong>.
	-	To make it just "look" bold, use span with css or <b>

	-	anchor tag:
	{
		-	<a href="01index.html#section1" download="01index.html"><p class="bg">go to section1</p></a>

		-	If a download tag is used, it ignores the href.

		-	<a href="mailto:nowhere@mozilla.org">Send email to nowhere</a>
		-	mailto: link indicates the email address of the intended recipient

		-	<a href="mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&bcc=name3@rapidtables.com&subject=The%20subject%20of%20the%20email&body=The%20body%20of%20the%20email">Send mail with cc, bcc, subject and body</a>
		-	This can also include other info such as cc, bcc, subject, body.
	}

	-	Description list: <dl>...</dl>
	{
		-	List of terms and their definitions.
		-	description term <dt>
		-	description definition <dd>

		-	Example:
		{
			<dl>
				<dt>aside</dt>
				<dd>
					In drama, where a character shares a comment only with the audience for humorous or dramatic effect. This is usually a feeling, thought, or piece of additional background information.
				</dd>
				<dd>
					In writing, a section of content that is related to the current topic, but doesn't fit directly into the main flow of content so is presented nearby (often in a box off to the side.)
				</dd>
			</dl>
		}
	}

	-	Quotations:
	{
		-	blockquote:
		{
			-	Block level content.
			-	<p>Kakashi said,<blockquote >I got lost in the path of life.</blockquote></p>
			-	Keeps new row for the quote.
		}

		-	Inline quotations:
		{
			-	<p>Kakashi said, <q>I got lost in the path of life.</q></p>
			-	Adds the quote inline to previous element.
		}
	}

	-	Abbreviations:
	{
		-	Use <abbr>TBD</abbr> to denote that a particular word is an acronym or abbrevation.
		-	Also use the title attribute to give expanded text in case of an acronym.
		-	Useful for screen readers.
	}

	-	Contact details:
	{
		-	Contact information can be wrapped with <address></address> tag.
		-	This could be address, phone number, email.
		-	It can also be an anchor tag linking to a page which has the contact information related to the current page.
		-	Only use it for the contact info that is related to the current page.
		-	Should NOT be used while displaying a list of unrelated addresses.
	}

	-	Computer code:
	{
		<code>: For marking up generic pieces of computer code.
		<pre>: For retaining whitespace (generally code blocks) — if you use indentation or excess whitespace inside your text, browsers will ignore it and you will not see it on your rendered page. If you wrap the text in <pre></pre> tags however, your whitespace will be rendered identically to how you see it in your text editor.
		<var>: For specifically marking up variable names.
		<kbd>: For marking up keyboard (and other types of) input entered into the computer.
		<samp>: For marking up the output of a computer program.
	}

	-	Times and dates:
	{
		-	<time datetime="2016-01-20">20 January 2016</time>
		-	This is used to signify the time and date in a machine readable format.
	}

	-	List:
	{
		-	The number of the ordered list items can be controlled using "start", "reversed" and "value" attributes.
		-	Reference: https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Styling_lists#controlling_list_counting
	}
}

Multimedia and embedding:
{
	Images: img, map, area, picture
	{
		-	Always host the images in the same place as the html or via a CDN.
		-	Do not use links that are hosted by an external site.
		-	Only host public domain or owned or permitted images.
		-	Use an alt tag, useful for screen reader users.
		-	If an image is used for decoration and not contributing to the content, use empty alt tag.

		-	Wrap the image with <figure></figure> and add the img and figcaption tag in it.
		-	Fig caption is always visible, so do not use the same text for alt and fig caption.

		-	Figure tag can be used for several images, a code snippet, audio, video, equations, a table, or something else.

		-	Background images:
		{
			-	These are for decoration only and do not work with screen readers.
		}

		-	Image maps:
		{
			-	This is used to redirect different parts of an image to different pages/links. Able to perform different actions depending on where in the image you click.
			-	To create an image map you need an image, and some HTML code that describes the clickable areas.
			-	The image is inserted using the <img> tag. The only difference from other images is that you must add a usemap attribute.
			-	The usemap value starts with a hash tag # followed by the name of the image map, and is used to create a relationship between the image and the image map.
			-	Then, add a <map> element. The <map> element is used to create an image map. The name attribute must have the same value as the <img>'s usemap attribute.
			-	Define the clickable areas using "area" tag.
			-	Set required href and/or on click functions.
		}
	}

	Audio Video:
	{
		video:
		{
			-	This requires a src same as in img tag.
			-	controls attribute to provide the media control to the user.
			-	The content inside the video tag will be used as fallback content in case the browser does not support video tag.

			-	Multiple formats:
			{
				-	Multiple formats can be provided by using source tag.
				-	Remove the src from video tag and add source tags with "src" and "type" attribute inside the video tag.
				-	If "type" isn't included, browsers will load and try to play each file until they find one that works, which obviously takes time and is an unnecessary use of resources.
				-	The source is picked up from top to bottom.
			}

			-	preload:
			{
				-	Used for buffering large files; it can take one of three values:
					-	"none" does not buffer the file
					-	"auto" buffers the media file
					-	"metadata" buffers only the metadata for the file
			}
		}

		audio:
		{
			-	The <audio> element doesn't support the "width"/"height" attributes as there is no visual component, so there is nothing to assign a width or height to.
			-	It also doesn't support the "poster" attribute — again, no visual component.
			-	It supports the remaining attributes as the video tag.
		}

		captions/subtitles/description:
		{
			-	The subtitles file can be included for a video or audio with <track> tag.
			-	<track> should be placed within <audio> or <video>, but after all <source> elements.
			-	"kind" attribute to specify whether the cues are subtitles, captions, or descriptions.
			-	"srclang" to tell the browser what language you have written the subtitles in.
			-	"label" to set the text of the option for this subtitle language.
		}

		Best practices: https://developer.mozilla.org/en-US/docs/Web/Guide/Audio_and_video_delivery
	}

	iframes:
	{
		-	Embed only your owned sites or sites with proper permissions.
		-	Double ensure that the third party site is super secure.
		-	Use HTTPS for the website"
		{
			-	HTTPS reduces the chance that remote content has been tampered with in transit,
			-	HTTPS prevents embedded content from accessing content in your parent document, and vice versa.
		}

		-	Use the sandbox attribute with no params. If absolutely required pass the params one by one. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox

		-	Site can be prevented from embedding into iframe using the "X-Frame-Options" header set to DENY or SAMEORIGIN or specific urls - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
	}

	SVG:
	{
		-	Raster images:
		{
			-	Are defined using a grid of pixels.
			-	Contains information showing exactly where each pixel is to be placed, and exactly what color it should be.
			-	Popular web raster formats include Bitmap (.bmp), PNG (.png), JPEG (.jpg), and GIF (.gif)
			-	When it is zoomed, each pixel is increased in size to fill multiple pixels on screen, so the image starts to look blocky.
		}

		-	Vector images:
		{
			-	Are defined using algorithms.
			-	Contains shape and path definitions that the computer can use to work out what the image should look like when rendered on the screen.
			-	When zoomed in, the vector image continues to look nice and crisp, because no matter what size it is, the algorithms are used to work out the shapes in the image, with the values being scaled as it gets bigger.

			-	Pros:
				-	Text in vector images remains accessible (which also benefits your SEO).
				-	SVGs lend themselves well to styling/scripting, because each component of the image is an element that can be styled via CSS or scripted via JavaScript.

			-	Cons:
				-	SVG can get complicated very quickly, meaning that file sizes can grow; complex SVGs can also take significant processing time in the browser.
				-	SVG can be harder to create than raster images, depending on what kind of image you are trying to create.
		}

		-	Ways to include svg:
		{
			-	img:
			{
				-	<img
						src="equilateral.svg"
						alt="triangle with all three sides equal"
						height="87"
						width="100"
					/>
				
				-	Pros
					-	Quick, familiar image syntax with built-in text equivalent available in the alt attribute.
					-	You can make the image into a hyperlink easily by nesting the <img> inside an <a> element.
					-	The SVG file can be cached by the browser, resulting in faster loading times for any page that uses the image loaded in the future.

				-	Cons
					-	You cannot manipulate the image with JavaScript.
					-	If you want to control the SVG content with CSS, you must include inline CSS styles in your SVG code. (External stylesheets invoked from the SVG file take no effect.)
					-	You cannot restyle the image with CSS pseudoclasses (like :focus).
				
				-	Old browser support:
				{
					-	<img src="equilateral.png" alt="triangle with equal sides" srcset="equilateral.svg" />
					-	Reference a PNG or JPG from your src attribute and use a srcset attribute (which only recent browsers recognize) to reference the SVG. This being the case, only supporting browsers will load the SVG — older browsers will load the PNG instead.

					-	In CSS:
					{
						background: url("fallback.png") no-repeat center;
						background-image: url("image.svg");
						background-size: contain;

						-	Older browsers will stick with the PNG that they understand, while newer browsers will load the SVG.
					}
				}
			}

			-	svg tag: SVG inline
			{
				Pros
					-	Putting your SVG inline saves an HTTP request, and therefore can reduce a bit your loading time.
					-	You can assign classes and ids to SVG elements and style them with CSS, either within the SVG or wherever you put the CSS style rules for your HTML document. -	In fact, you can use any SVG presentation attribute as a CSS property.
					-	Inlining SVG is the only approach that lets you use CSS interactions (like :focus) and CSS animations on your SVG image (even in your regular stylesheet.)
					-	You can make SVG markup into a hyperlink by wrapping it in an <a> element.

				Cons
					-	This method is only suitable if you're using the SVG in only one place. Duplication makes for resource-intensive maintenance.
					-	Extra SVG code increases the size of your HTML file.
					-	The browser cannot cache inline SVG as it would cache regular image assets, so pages that include the image will not load faster after the first page containing the image is loaded.
					-	You may include fallback in a <foreignObject> element, but browsers that support SVG still download any fallback images. You need to weigh whether the extra overhead is really worthwhile, just to support obsolescent browsers.
			}

			-	iframe:
			{
				-	<iframe src="triangle.svg" width="500" height="500" sandbox>
						<img src="triangle.png" alt="Triangle with three unequal sides" />
					</iframe>

				-	Not the best method to choose.
				-	Cons
					-	iframes do have a fallback mechanism, as you can see, but browsers only display the fallback if they lack support for iframes altogether.
					-	Moreover, unless the SVG and your current webpage have the same origin, you cannot use JavaScript on your main webpage to manipulate the SVG.
			}
		}
	}

	Responsive images:
	{
		-	Use srcset and sizes attribute of img to provide different images for different screen sizes. (Did not work properly. Better to use the <picture> tag with multiple sources.)

		-	Use "picture" tag with multiple sources for specific media width.
		-	"img" tag is mandatory as default in this case.
	}
}

Tables:
{
	-	Use caption tag right after the table opening.
	-	colgroup can be used to style the entire columns as per the layout.
	-	List the number of required "col"s inside colgroup and give required styles for each column.
	-	The style can be spanned multiple columns with "span" attribute.

	-	Below this comes the following:
	{
		-	thead: wraps the tr with column headers (th).
		-	tbody: wraps the tr's with body content.
		-	tfoot: wraps the last row with summary/sum of tbody content.
	}

	-	More here: https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Advanced
}

Structure: https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure
{
	-	Semantic tags:
	{
		-	header
		-	nav
		-	main
			-	article
			-	section
			-	aside
		-	footer

		-	<article>	Defines independent, self-contained content
		-	<aside>	Defines content aside from the page content
		-	<details>	Defines additional details that the user can view or hide
		-	<figcaption>	Defines a caption for a <figure> element
		-	<figure>	Specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.
		-	<footer>	Defines a footer for a document or section
		-	<header>	Specifies a header for a document or section
		-	<main>	Specifies the main content of a document
		-	<mark>	Defines marked/highlighted text
		-	<nav>	Defines navigation links
		-	<section>	Defines a section in a document
		-	<summary>	Defines a visible heading for a <details> element
		-	<time>	Defines a date/time
	}

	-	Steps to structure a page:
	{
		-	List all the things that needs to be displayed.
		-	Have a rough sketch of where these things go.
		-	Group the elements based on their relationship.
		-	Sketch a sitemap depicting the workflow.
	}
}

XHTML: A stricter version of html - https://www.w3schools.com/html/html_xhtml.asp

Possible issues:
{
	-	Missing closing tags.
	-	Bad nesting - jumbled closing tags.
	-	Missing or improper attribute values.
}

SEO/Accessibilty:
{
	-	Proper headings and meta tags are important for good SEO ranking.
	-	Search engines indexing your page consider the contents of headings as important keywords for influencing the page's search rankings. Without headings, your page will perform poorly in terms of SEO.
	-	Use semantic elements (em, strong) over presentation elements (i, b) for better SEO.
	-	Title and meta description are important.
	-	Use track tag to give text content for audio and video.
	-	Use caption tag inside tables.
	-	Declare the lang in html tag. https://www.w3schools.com/tags/ref_language_codes.asp
}

Security:
{
	-	HTTP Status Messages: https://www.w3schools.com/tags/ref_httpmessages.asp
	-	HTTP Request Methods: https://www.w3schools.com/tags/ref_httpmethods.asp
}

Emmet:
{
	-	section>article.article-${Article $}*7
	{
		This generates a section with 7 articles with class "article-<0-7>" and with inner text "Article <0-7>"
	}

	-	Reference: https://docs.emmet.io/cheat-sheet/
}

Snippets:
{
	Display base64 image - <img src={`data:image/jpeg;base64,${data}`} /> 
}